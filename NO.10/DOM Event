DOM Event
	鼠标
		如果使用添加观察者的方式 ，事件的名称是 去掉on的方法名（"click"）
		事件方法名
			onclick	单击 鼠标《抬起》的时候触发
			ondblclick	双击	

			onmousedown	《只要》鼠标按下的时候 触发
			onmouseup	鼠标按键被松开触发

			onmouseenter	当鼠标指针移动到元素《里面》的时候触发
			onmouseout	鼠标从某元素《里面》移开 的时候触发

			onmouseover	鼠标移到某元素之上。只要到了目标元素就会触发这个事件 （不需要等移入进去触发 会在enter之前触发）
			onmouseleave	当鼠标指针移出元素时触发（out之后触发）

			onmousemove	鼠标被移动。只要一直在上面移动 就会《一直触发》	

		MouseEvent包含的属性
			x：点击的位置 
			y：点击的位置
			type:类型
			timeStamp：
				时间戳 毫秒 
				可以通过时间戳 来区分用户是点击 还是 长按 
				会继续在之前点击的事件时间基础之上继续添加时间
				网页加载完成之后   鼠标点击元素的时候  之间的时间（毫秒）
			toElement：作用的元素
			target：响应作用的元素
			path：用来查找响应事件的层级关系 第一个元素 是第一个响应这个时间的 会一层层传递下去到 一直到window(事件的响应链)
			shadow:shadow DOM对象（Shadow）是用来分开JavaScript、 CSS、HTML

	键盘
		方法名
			onkeydown	只检测键盘按下的事件
			onkeypress	某个键盘按键被按下并松开。	
			onkeyup	只检测键盘松开的事件
		KeyboardEvent
			code:键盘按钮的 代码标示值（"KeyM"）是一个字符串  可以通过这个字符串 找到用户按下的按钮
			key:键盘的按钮值 "m"
			keyCode:键的代码标识 数字形式 77
			keyIdentifier：键盘的唯一标识符  找到按键的唯一标识符

			path:dom响应的路径 通过下标 决定触发的优先级
			timeStamp：触发的时间戳
			type：触发事件的类型
			which：哪一个键出发的（数字形式的keyCode）
			target：作用的目标
			shiftKey：是否按下了shift
			returnValue：是否按下了return
			ctrlKey：是否按下了ctrl键

	其他
		onfocus 获得到焦点的时候调用 开始输入
			FocusEvent
				path:dom响应的路径 通过下标 决定触发的优先级
				returnValue：是否按下了return
				target：作用的目标
				timeStamp：触发的时间戳 
				type：触发的类型
		oninput 正在输入 (必须往输入框内输入内容才算输入《enter、shift不算》)
		onselect 里面的内容被选择的时候
		oncopy 拷贝元素上面的内容的时候
		oncut 剪切的时候
		onpaste 粘贴的时候

		onblur 失去焦点的时候调用 输入完毕
		onchange 输入完毕 里面的内容被改变的时候
	
Date 日期 
	Date()	返回当日的日期和时间。
	getDate() 得到date对象    是当月的第几天
 	getDay()	从 Date 对象返回一周中的某一天 (0 ~ 6)。
	getMonth()	从 Date 对象返回月份 (0 ~ 11)。
	getFullYear()	从 Date 对象以四位数字返回年份。

	getHours()	返回 Date 对象的小时 (0 ~ 23)。
	getMinutes()	返回 Date 对象的分钟 (0 ~ 59)。
	getSeconds()	返回 Date 对象的秒数 (0 ~ 59)。
	getMilliseconds()	返回 Date 对象的毫秒(0 ~ 999)。

	getTime()	时间戳 返回 1970 年 1 月 1 日至今的毫秒数。 一定要确认 服务端时间戳 是从秒还是毫秒开始

	getTimezoneOffset()	返回本地时间与格林威治标准时间 (GMT) 的分钟差。

	getUTCDate()	根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。

	getUTCDay()	UTC(Coordinated Universal Time)根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。

	getUTCMonth()	根据世界时从 Date 对象返回月份 (0 ~ 11)。

	getUTCFullYear()	根据世界时从 Date 对象返回四位数的年份。

	getUTCHours()	根据世界时返回 Date 对象的小时 (0 ~ 23)。

	getUTCMinutes()	根据世界时返回 Date 对象的分钟 (0 ~ 59)。

	getUTCSeconds()	根据世界时返回 Date 对象的秒钟 (0 ~ 59)。

	getUTCMilliseconds()	根据世界时返回 Date 对象的毫秒(0 ~ 999)。



	setDate()	设置 Date 对象中月的某一天 (1 ~ 31)。
	setMonth()	设置 Date 对象中月份 (0 ~ 11)。
	setFullYear()	设置 Date 对象中的年份（四位数字）。
	setHours()	设置 Date 对象中的小时 (0 ~ 23)。
	setMinutes()	设置 Date 对象中的分钟 (0 ~ 59)。
	setSeconds()	设置 Date 对象中的秒钟 (0 ~ 59)。
	setMilliseconds()	设置 Date 对象中的毫秒 (0 ~ 999)。



	setTime()	✭✭✭✭✭以毫秒设置 Date 对象。可以把服务端提供给的 时间戳 转换成js中date对象

	setUTCDate()	根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。
	setUTCMonth()	根据世界时设置 Date 对象中的月份 (0 ~ 11)。
	setUTCFullYear()	根据世界时设置 Date 对象中的年份（四位数字）。
	setUTCHours()	根据世界时设置 Date 对象中的小时 (0 ~ 23)。
	setUTCMinutes()	根据世界时设置 Date 对象中的分钟 (0 ~ 59)。
	setUTCSeconds()	根据世界时设置 Date 对象中的秒钟 (0 ~ 59)。
	setUTCMilliseconds()	根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。

	parse()	返回1970年1月1日午夜到指定日期（字符串）的毫秒数。是一个类方法 把字符串的日期 格式化为一个时间戳

	toString()	把 Date 对象转换为字符串。
	toTimeString()	把 Date 对象的时间部分转换为字符串。
	toDateString()	把 Date 对象的日期部分转换为字符串。

	toUTCString()	根据世界时间 把 Date 对象转换为字符串。
	toLocaleString()	根据本地时间格式，把 Date 对象转换为字符串。
	toLocaleTimeString()	根据本地时间格式，把 Date 对象的时间部分转换为字符串。
	toLocaleDateString()	根据本地时间格式，把 Date 对象的日期部分转换为字符串。
	UTC()	根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。
	parse()	返回1970年1月1日午夜到指定日期（字符串）的毫秒数。
	valueOf()	返回 Date 对象的原始值。

transform:
	rotate:rotate(angle deg)
	scale(x,y)
	transform-origin:x y （以百分比的形式设置） 设置旋转的起始点

作业：
1.完成数字时钟：周二下午03:01 这种格式
2.完成时钟界面
3.霓虹灯 点击开始按钮 开始闪烁 按钮显示开始 点击结束停止


4.写一个导航栏 鼠标移入到某个元素 显示一个列表 分类不同 列表中显示的内容和数量不同
5.用户登录界面

